name: pack from deb

on:
  workflow_dispatch: {}
  push:
    branches:
      - main
    paths:
      - .github/workflows/deb.yaml
      - deb/*
  pull_request:
    paths:
      - .github/workflows/deb.yaml
      - deb/*

permissions:
  packages: write

jobs:
  deb:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set version
        id: version
        run: echo "::set-output name=version::`cat deb/VERSION`"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/investigativedata/protonmail-bridge
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha
            type=raw,value=latest
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build image without push
        uses: docker/build-push-action@v2
        with:
          context: ./deb
          file: ./deb/Dockerfile
          load: true
          tags: protonmail-bridge:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Scan image
        id: scan
        uses: anchore/scan-action@v2
        with:
          image: protonmail-bridge:latest
          fail-build: true
          severity-cutoff: critical
          acs-report-enable: true
      # - name: Upload Anchore scan SARIF report
      #   uses: github/codeql-action/upload-sarif@v2
      #   with:
      #     sarif_file: ${{ steps.scan.outputs.sarif }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push image
        uses: docker/build-push-action@v3
        with:
          context: ./deb
          file: ./deb/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
